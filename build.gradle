project(':jcoro-api') {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = '1.0'
    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }
}

project(':jcoro-agent') {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = 1.0
    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":jcoro-api")
        compile 'org.ow2.asm:asm:5.0.4'
        compile 'org.ow2.asm:asm-analysis:5.0.4'
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    jar {
        manifest {
            attributes("Manifest-Version": "1.0",
                    "PreMain-Class": "org.jcoro.Agent")
        }
    }
}

project(':jcoro-app') {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = 1.0

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":jcoro-api")
        compile project(":jcoro-agent")
        compile group: 'junit', name: 'junit', version: '4.11'
    }

    task instrumentClasses(type: JavaExec) {
        main = "org.jcoro.Program"
        //
        Collection<File> asmDependencies = project.configurations.compile.findAll { it.name.startsWith("asm") }
        List<String> paths = new ArrayList<String>()
        for (File f : asmDependencies) { paths.add(f.absolutePath) }
        paths.add("../jcoro-api/build/libs/jcoro-api-1.0.jar")
        paths.add("../jcoro-agent/build/libs/jcoro-agent-1.0.jar")
        classpath = files(paths)
        //
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
        args = ["--source", compileJava.destinationDir, "--dest", "./build/classes/instrumented"]
    }

    task instrumentTestClasses(type: JavaExec) {
        main = "org.jcoro.Program"
        //
        Collection<File> asmDependencies = project.configurations.compile.findAll { it.name.startsWith("asm") }
        List<String> paths = new ArrayList<String>()
        for (File f : asmDependencies) { paths.add(f.absolutePath) }
        paths.add("../jcoro-api/build/libs/jcoro-api-1.0.jar")
        paths.add("../jcoro-agent/build/libs/jcoro-agent-1.0.jar")
        classpath = files(paths)
        //
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
        args = ["--source", test.testClassesDir, "--dest", "./build/classes/testInstrumented"]
    }

    sourceSets {
        test {
            // Вместо дефолтной директории "test" используем "testInstrumented" для запуска тестов
            runtimeClasspath = (files("./build/classes/testInstrumented")
                + sourceSets.main.output + configurations.testRuntime)
        }
    }

    test {
        testClassesDir = new File("./build/classes/testInstrumented")

//        beforeSuite {
//            logger.lifecycle("Test classes dir:" + test.testClassesDir)
//            for (def classpathItem : test.classpath)
//                logger.lifecycle("Classpath item: " + classpathItem)
//        }

//        beforeTest { descriptor ->
//            logger.lifecycle("Running test: " + descriptor)
//        }
    }

    jar {
        doFirst {
            sourceSets.main.output.classesDir = "build/classes/instrumented"
        }
        dependsOn instrumentClasses
    }

    instrumentClasses.dependsOn classes

    test.dependsOn instrumentTestClasses
    instrumentTestClasses.dependsOn testClasses
}