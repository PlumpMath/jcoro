//allprojects {
//
//    apply plugin: 'idea'
//
//    idea {
//        module {
//            // if you hate browsing Javadoc
//            downloadJavadoc = false
//
//            // and love reading sources :)
//            downloadSources = true
//        }
//    }
//
//    repositories {
//        mavenLocal()
//        mavenCentral()
//    }
//}

project(':jcoro-analyzer') {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = '1.0'

    repositories {
	mavenCentral()
    }

    dependencies {
	compile project(":jcoro-api")
        compile 'org.ow2.asm:asm:5.0.4'
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }
}

project(':jcoro-api') {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = '1.0'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }
}

project(':jcoro-agent') {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = 1.0
    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":jcoro-api")
        compile 'org.ow2.asm:asm:5.0.4'
        compile 'org.ow2.asm:asm-analysis:5.0.4'
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    jar {
        manifest {
            attributes("Manifest-Version": "1.0",
                    "PreMain-Class": "org.jcoro.Agent")
        }
    }
}

project(':jcoro-app') {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = 1.0

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":jcoro-api")
        compile project(":jcoro-agent")
        compile group: 'junit', name: 'junit', version: '4.11'
    }

    task gogogo(type: JavaExec) {
        main = "org.jcoro.Program"
        classpath = files("../jcoro-api/build/libs/jcoro-api-1.0.jar",
                "../jcoro-agent/build/libs/jcoro-agent-1.0.jar",
                "../lib/asm-all-5.0.4.jar")
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
        args = ["--source", test.testClassesDir, "--dest", "./build/classes/testInstrumented"]

        // todo : instrument all classes in ./build/classes/test
        logger.lifecycle("Test classes:::: " + test.testClassesDir)
    }

    sourceSets {
        test {
            // Вместо дефолтной директории "test" используем "testInstrumented" для запуска тестов
            runtimeClasspath = (files("./build/classes/testInstrumented")
                + sourceSets.main.output + configurations.testRuntime)
        }
    }

    test {
        testClassesDir = new File("./build/classes/testInstrumented")

        beforeSuite {
            logger.lifecycle("Test classes dir:" + test.testClassesDir)
            for (def classpathItem : test.classpath)
                logger.lifecycle("Classpath item: " + classpathItem)
        }

        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }
    }

    test.dependsOn gogogo
    gogogo.dependsOn testClasses
}

task runWithAgent(type: JavaExec) {
    main = "org.jcoro.tests.simpletest2.TestCoro"
    classpath = files("jcoro-api/build/libs/jcoro-api-1.0.jar",
        "jcoro-app/build/libs/jcoro-app-1.0.jar",
        "lib/asm-all-5.0.4.jar")
    jvmArgs = ["-javaagent:jcoro-agent/build/libs/jcoro-agent-1.0.jar",
        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"]
}

runWithAgent.dependsOn ":jcoro-agent:build", ":jcoro-app:build"